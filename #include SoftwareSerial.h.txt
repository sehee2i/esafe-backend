#include <SoftwareSerial.h>
#include <Servo.h>

#define ESP_RX 2
#define ESP_TX 3
#define SERVO_PIN 9

SoftwareSerial ESP_wifi(ESP_RX, ESP_TX);
Servo myServo;

const char* ssid = "FREE_U+zone";
const char* password = "";
const char* server = "15.165.159.138"; // 서버 IP 주소
const int serverPort = 3000;           // 서버 포트 번호

void setup() {
  Serial.begin(9600);
  ESP_wifi.begin(9600);
  myServo.attach(SERVO_PIN);

  delay(2000);
  Serial.println("Wi-Fi 연결 시도 중...");

  if (connectToWiFi()) {
    Serial.println("Wi-Fi 연결 성공!");
    delay(1000);

    // 서보 모터 180도 회전
    myServo.write(180);
    delay(1000);
    myServo.write(0);
    delay(1000);
    Serial.println("서보 모터가 180도 회전했습니다.");

    // 서버에 HTTP 요청 전송
    if (sendHTTPPostRequest()) {
      Serial.println("서버로 데이터 전송 성공!");
    } else {
      Serial.println("서버로 데이터 전송 실패");
    }
  } else {
    Serial.println("Wi-Fi 연결 실패");
  }
}

void loop() {
  // loop는 비워 둡니다.
}

bool connectToWiFi() {
  ESP_wifi.println("AT");
  if (!waitForResponse("OK", 5000)) return false;

  ESP_wifi.println("AT+CWMODE=1");
  if (!waitForResponse("OK", 5000)) return false;

  ESP_wifi.print("AT+CWJAP=\"");
  ESP_wifi.print(ssid);
  ESP_wifi.print("\",\"");
  ESP_wifi.print(password);
  ESP_wifi.println("\"");

  return waitForResponse("WIFI GOT IP", 15000);
}

bool sendHTTPPostRequest() {
  ESP_wifi.print("AT+CIPSTART=\"TCP\",\"");
  ESP_wifi.print(server);
  ESP_wifi.print("\",");
  ESP_wifi.println(serverPort);

  if (!waitForResponse("OK", 5000)) return false;

  // HTTP POST 요청 작성
  String jsonData = "{\"action\":\"activate\"}"; // 요청 본문에 포함될 데이터
  String httpPost = "POST /trigger-alert HTTP/1.1\r\n";
  httpPost += "Host: " + String(server) + "\r\n";
  httpPost += "Content-Type: application/json\r\n";
  httpPost += "Content-Length: " + String(jsonData.length()) + "\r\n";
  httpPost += "\r\n";
  httpPost += jsonData;

  ESP_wifi.print("AT+CIPSEND=");
  ESP_wifi.println(httpPost.length());

  if (!waitForResponse(">", 5000)) return false;

  ESP_wifi.print(httpPost);
  return waitForResponse("SEND OK", 5000);
}

bool waitForResponse(const char* response, unsigned long timeout) {
  unsigned long startTime = millis();

  while (millis() - startTime < timeout) {
    if (ESP_wifi.available()) {
      String received = ESP_wifi.readString();
      Serial.print(received);
      if (received.indexOf(response) != -1) {
        return true;
      }
    }
  }

  Serial.println("응답 대기 시간 초과");
  return false;
}  
