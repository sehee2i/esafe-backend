<<이걸로>>
<<twillo 서버>>
import dotenv from 'dotenv'; // ES 모듈 방식으로 import
import express from 'express';
import path from 'path';
import Twilio from 'twilio';

dotenv.config({ path: './env.env' });

const gpsData = {
    latitude: null,
    longitude: null,
    altitude: null,
    date: {
        day: null,
        month: null,
        year: null
    }
};

const app = express();
const port = 3000;

// Twilio 클라이언트 초기화
console.log('Account SID:', process.env.TWILIO_ACCOUNT_SID);
console.log('Auth Token:', process.env.TWILIO_AUTH_TOKEN);
console.log('Phone Number:', process.env.PHONE_NUMBER);

const client = new Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(path.resolve(), 'public')));

app.get('/', (req, res) => {
    res.sendFile(path.join(path.resolve(), 'public', 'index.html'));
});

async function sendAlerts() {
    const phoneNumber = process.env.PHONE_NUMBER;

    try {
        const message = await client.messages.create({
            body: '위급상황 입니다. 위치를 확인하세요: http://15.165.159.138:3000/',
            from: '+17175370579', // Twilio에서 할당된 전화번호
            to: phoneNumber
        });

        console.log('문자 전송 성공:', message.sid);

        const call = await client.calls.create({
            twiml: `
                <Response>
                    <Say language='ko-KR'>응급 상황입니다. 문자 메시지를 확인해주세요.</Say>
                </Response>
            `,
            from: '+17175370579',
            to: phoneNumber
        });

        console.log('전화 전송 성공:', call.sid);
    } catch (error) {
        console.error('전송 실패:', error);
    }
}

app.post('/trigger-alert', async (req, res) => {
    console.log('Received request:', req.body);
    const { action, lat, lng, altitude, day, month, year } = req.body;

    if (action === 'activate') {
        if (lat == null || lng == null || altitude == null || day == null || month == null || year == null) {
            return res.status(400).json({ error: '위도, 경도, 고도 및 날짜 정보가 필요합니다.' });
        }

        // GPS 데이터 업데이트
        gpsData.latitude = lat;
        gpsData.longitude = lng;
        gpsData.altitude = altitude;
        gpsData.date.day = day;
        gpsData.date.month = month;
        gpsData.date.year = year;

        console.log(`Received location: Latitude ${lat}, Longitude ${lng}, Altitude ${altitude}`);
        console.log(`Received date: ${day}/${month}/${year}`);

        // jsonData 문자열 생성
        const jsonData = JSON.stringify({
            latitude: lat,
            longitude: lng,
            altitude: altitude,
            date: {
                day: day,
                month: month,
                year: year
            }
        });
        
        console.log(`Generated jsonData: ${jsonData}`);
        
        try {
            await sendAlerts();
            res.json({ status: '알림이 전송되었습니다.' });
        } catch (error) {
            console.error('알림 전송 실패:', error);
            res.status(500).json({ error: '알림 전송에 실패했습니다.' });
        }
    } else {
        res.status(400).json({ error: '유효하지 않은 동작입니다.' });
    }
});

app.get('/get-gps-data', (req, res) => {
    if (gpsData.latitude !== null && gpsData.longitude !== null && gpsData.altitude !== null) {
        res.json(gpsData); // GPS 데이터 반환
    } else {
        res.status(404).json({ error: 'GPS 데이터가 없습니다.' });
    }
});

app.listen(port, '0.0.0.0', () => {
    console.log(`서버가 http://0.0.0.0:${port}에서 실행 중입니다.`);
});
<<twillo http>>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leaflet Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        #map {
            height: 100vh; /* 전체 높이 */
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // 지도 초기화
        const map = L.map('map').setView([37.5665, 126.978], 10); // 서울 중심

        // OpenStreetMap 타일 레이어 추가
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // 마커 추가 (예: 서울시청)
        L.marker([37.5665, 126.978]).addTo(map)
            .bindPopup('서울시청')
            .openPopup();
    </script>
</body>
</html>

##############################################################
<<이거 안사용함>>
const gpsData = {
    latitude: null,
    longitude: null,
    altitude: null,
    date: {
        day: null,
        month: null,
        year: null
    }
};
require('dotenv').config({ path: './env.env' }); // env.env 파일 경로 지정
const express = require('express');
const path = require('path');
const Twilio = require('twilio');

const app = express();
const port = 3000;

// Twilio 클라이언트 초기화
console.log('Account SID:', process.env.TWILIO_ACCOUNT_SID);
console.log('Auth Token:', process.env.TWILIO_AUTH_TOKEN);
console.log('Phone Number:', process.env.PHONE_NUMBER);

const client = new Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

async function sendAlerts() {
    const phoneNumber = process.env.PHONE_NUMBER;

    try {
        const message = await client.messages.create({
            body: '위급상황 입니다. 위치를 확인하세요: http://15.165.159.138:3000/',
            from: '+17175370579', // Twilio에서 할당된 전화번호
            to: phoneNumber
        });

        console.log('문자 전송 성공:', message.sid);

        const call = await client.calls.create({
            twiml: `
                <Response>
                    <Say language='ko-KR'>응급 상황입니다. 문자 메시지를 확인해주세요.</Say>
                </Response>
            `,
            from: '+17175370579',
            to: phoneNumber
        });

        console.log('전화 전송 성공:', call.sid);
    } catch (error) {
        console.error('전송 실패:', error);
    }
}

app.post('/trigger-alert', async (req, res) => {
    console.log('Received request:', req.body);
    const { action, lat, lng, altitude, day, month, year } = req.body;

    if (action === 'activate') {
        if (lat == null || lng == null || altitude == null || day == null || month == null || year == null) {
            return res.status(400).json({ error: '위도, 경도, 고도 및 날짜 정보가 필요합니다.' });
        }

        // GPS 데이터 업데이트
        gpsData.latitude = lat;
        gpsData.longitude = lng;
        gpsData.altitude = altitude;
        gpsData.date.day = day;
        gpsData.date.month = month;
        gpsData.date.year = year;

        console.log(`Received location: Latitude ${lat}, Longitude ${lng}, Altitude ${altitude}`);
        console.log(`Received date: ${day}/${month}/${year}`);

        // jsonData 문자열 생성
        const jsonData = JSON.stringify({
            latitude: lat,
            longitude: lng,
            altitude: altitude,
            date: {
                day: day,
                month: month,
                year: year
            }
        });
        
        console.log(`Generated jsonData: ${jsonData}`);
        
        try {
            await sendAlerts();
            res.json({ status: '알림이 전송되었습니다.' });
        } catch (error) {
            console.error('알림 전송 실패:', error);
            res.status(500).json({ error: '알림 전송에 실패했습니다.' });
        }
    } else {
        res.status(400).json({ error: '유효하지 않은 동작입니다.' });
    }
});

app.get('/get-gps-data', (req, res) => {
    if (gpsData.latitude !== null && gpsData.longitude !== null && gpsData.altitude !== null) {
        res.json(gpsData); // GPS 데이터 반환
    } else {
        res.status(404).json({ error: 'GPS 데이터가 없습니다.' });
    }
});

app.listen(port, '0.0.0.0', () => {
    console.log(`서버가 http://0.0.0.0:${port}에서 실행 중입니다.`);
});